install

text
lang en_US
keyboard us

network --bootproto=dhcp --device=eth0

skipx
timezone --utc America/Chicago
rootpw --iscrypted x
firewall --disabled
firstboot --disabled
authconfig --enableshadow --enablemd5
reboot --eject
selinux --disabled

%packages --ignoremissing



url --url=http://ftp.linux.ncsu.edu/pub/centos/6/os/x86_64/
repo --name=updates --mirrorlist=http://mirrorlist.centos.org/?release=6&arch=x86_64&repo=updates


%pre

TTY=tty1
grep -q console=ttyS0 /proc/cmdline && TTY=ttyS0
grep -q console=ttyS1 /proc/cmdline && TTY=ttyS1
exec < /dev/$TTY > /dev/$TTY

INTERACTIVE=0
grep -wq interactive /proc/cmdline && INTERACTIVE=1

INCLUDE=/tmp/ks-include
#MEDIA=usbdisk
#grep -q cdrom /proc/cmdline && MEDIA=cdrom


good_disk () {
  local block=/sys/block/$1/size
  [ -e $block ] || return 1
  [ `cat $block` -gt 30000 ] || return 1
  return 0
}

show_disk_sizes () {
  local dev
  for dev in $*; do
    size=`cat /sys/block/$dev/size`
    size=$((($size/2/1024+500)/1000))
    echo $dev \($size GB\)
  done
}

find_disk () {
  local DEVS=$(grep 0 `ls -1d /sys/block/*/device  | sed 's/device.*/removable/'` | sed 's+^.*block/\(.*\)/removable.*+\1+')
  local DEVCNT=`echo $DEVS | wc -w`
  if [ $DEVCNT -gt 1 ]; then
    echo "Mutiple disks found. Please select the disk to install on"
    until good_disk $DEV; do
       show_disk_sizes $DEVS
       echo -n "Enter device name: "
       read DEV
    done
    [ $DEV != sda  && $MEDIA == usbdisk ] || touch /tmp/eject-usb-disk
  elif [ $DEVCNT -eq 0 ]; then
    echo -n "No disk found. Reboot? "
    read yn
    echo $yn | grep -qi y && reboot
  else
    DEV=$DEVS
  fi
  echo "bootloader --location=mbr --driveorder=$DEV" >> $INCLUDE
}

find_disk

echo "Installing on /dev/$DEV"

dd if=/dev/zero of=/dev/$DEV bs=512 count=1 2>/dev/null || {
  echo "Cannot write to /dev/$DEV"
  echo "Press <return> to reboot"
  read line
  reboot
  exit
}
parted -s /dev/$DEV mklabel msdos
sync


MB=`expr 1024 \* 1024`
TOTAL_SECT=`parted -s /dev/$DEV unit s print free | grep Free | awk '{print $3}' | cut -d s -f1`
TOTAL_MB=`expr $TOTAL_SECT \* 512 / $MB`
echo
echo "   Disk size: $TOTAL_MB MB"
echo
if   [ $TOTAL_MB -lt 15000 ]; then
  echo "Error: Disk must be greater than 15GB"
  echo "Press <return> to reboot"
  read line
  reboot
  exit
elif   [ $TOTAL_MB -lt 20000 ]; then
  FS_SIZE=5000
elif [ $TOTAL_MB -lt 40000 ]; then
  FS_SIZE=10000
elif [ $TOTAL_MB -lt 70000 ]; then
  FS_SIZE=25000
else
  FS_SIZE=61441
fi

[ $INTERACTIVE -ne 0 ] && {
  until [ x"$fs" != x ] && [ $fs -ge 2000 ];do
    echo -n "Enter the forescout partition size in MB: "
    read fs
  done
  FS_SIZE=$fs
  echo FS_SIZE=$FS_SIZE
  [ $FS_SIZE -lt 5000 ] && echo WARNING: The minimum recommended forescout partition size is 5000 MB
}


TOTAL_RAM=`grep MemTotal: /proc/meminfo | awk '{print int($2/1024)}'`
if [ $TOTAL_RAM -lt 2000 -o $TOTAL_MB -lt 80000 ]; then
  SWAP_SIZE=2048
else
  SWAP_SIZE=4096
fi

PARTEDIN=/tmp/parted.in
PARTEDOUT=/tmp/parted.out

echo "unit s" > $PARTEDIN

PART_START=128
PART_NO=0

MAJOR=3
[ $DEV == 'hda' ] && MAJOR=8
MINOR_OFFSET=0

mkpart() {
  [ $1 == "logical" ] && PART_START=`expr $PART_START + 64`
  if [ $3 -gt 0 ]; then
    local PART_END=`expr \( $PART_START + $3 \* $MB / 512 \) - 1`
    echo "mkpart $1 $2 $PART_START $PART_END" >> $PARTEDIN
    PART_START=`expr $PART_END + 1`
  else 
    echo "mkpart $1 $2 $PART_START $3" >> $PARTEDIN
  fi
  PART_NO=`expr $PART_NO + 1`
  MINOR=`expr $PART_NO - $MINOR_OFFSET`
  DEVNAME="$DEV$PART_NO"
  [ -b /dev/$DEVNAME ] || mknod /dev/$DEVNAME b $MAJOR $MINOR
  if [ $1 == 'extended' ]; then
    return 
  elif [ $2 == 'linux-swap' ]; then
    echo "part swap --onpart $DEVNAME" >> $INCLUDE
  elif [ $2 == 'fat32' ]; then
    echo "part $4 --fstype vfat --onpart $DEVNAME" >> $INCLUDE
  else
    echo "part $4 --fstype $2 --onpart $DEVNAME" >> $INCLUDE
  fi
  PSIZE=$3
  [ $3 -lt 0 ] && PSIZE=`expr \( $TOTAL_SECT - $PART_START \) \* 512 / $MB`
  PSIZE=`echo "          $PSIZE MB" | awk '{print substr($0,length-13)}'`
  echo "   $PSIZE : $DEVNAME : $4"
}

partable_written() {
  grep $DEV /tmp/syslog | tail -2 | grep -q "$DEV$PART_NO"
}

mkpart primary  ext3       256          /boot                 # /dev/sda1 
mkpart primary  ext3       4096         /ghost                # /dev/sda2
mkpart primary  ext3       $FS_SIZE     /                     # /dev/sda3
mkpart extended ''         -1                                 # /dev/sda4
mkpart logical  fat32      256          /drbd_meta            # /dev/sda5
mkpart logical  linux-swap $SWAP_SIZE   swap                  # /dev/sda6
mkpart logical  ext3       -1           /extra               # /dev/sda7

echo quit >> $PARTEDIN

parted /dev/$DEV < $PARTEDIN >> $PARTEDOUT
hdparm -z /dev/$DEV >/dev/null
SLEEP=1
until partable_written; do
  echo "Syncing partition table($SLEEP)"
  dd if=/dev/zero of=/dev/$DEV bs=512 count=1 2>/dev/null
  parted -s /dev/$DEV mklabel msdos > /dev/null
  parted /dev/$DEV < $PARTEDIN > /dev/null
  partable_written || {
    sleep $SLEEP
    hdparm -z /dev/$DEV >/dev/null
    sleep $SLEEP
  }
  SLEEP=`expr $SLEEP + 1`
done

echo "/dev/$DEV partition table:" >> $PARTEDOUT
parted /dev/$DEV unit s print free >> $PARTEDOUT

sync; sleep 1
sync; sleep 1

[ $INTERACTIVE -ne 0 ] && {
  echo "Press <return> to continue"
  read line
}

%end
%post --nochroot

disk=mnt/sysimage
guidir=usr/local/forescout/webapps/portal/management-setup
cdrom=mnt/source
rpmdir=$cdrom/Packages
srcdir=$disk/usr/src/forescout

[ -e /$cdrom/Packages ] || {
        mkdir -p /$cdrom 2>/dev/null
        mount /mnt/isodir/*.iso /$cdrom -o loop
}

Disp3() {
	echo $1 > /dev/tty1
	echo $1 > /dev/ttyS0
	echo $1 > /dev/ttyS1
}

Disp3n() {
	echo -n $1 > /dev/tty1
	echo -n $1 > /dev/ttyS0
	echo -n $1 > /dev/ttyS1
}

Clear() {
	for (( ; skip<48; skip=$(($skip+1)))); do 
		Disp3 "
"
	done
}

Dispn() {
	Disp3n "
 -- $1"
}

Disp() {
	Disp3 "
 -- $1"
}

Inst2() {
  chmod $1 $2
  cp $2 /$disk/$3
}

InitttyS() {
  local id=`echo $1 | sed 's/tty//'`
  grep -v "getty.* $1" < /$disk/etc/inittab > /tmp/inittab
  stty < /dev/$1 >& /dev/null && echo "co$id:2345:respawn:/sbin/agetty -L 19200 $1 vt100" >> /tmp/inittab
  Inst2 644 /tmp/inittab etc

}

modifyGrub() {
        cp -fp /$disk/boot/grub/grub.conf /$disk/boot/grub/grub.conf.rhgb
        sed "s/$1/$2/" /$disk/boot/grub/grub.conf > /$disk/boot/grub/grub.conf.new
        cat /$disk/boot/grub/grub.conf.new > /$disk/boot/grub/grub.conf
        rm -f /$disk/boot/grub/grub.conf.new
}

Progress() {
  local total="$1"
  local prefix="$2"
  local done=0
  local pper=0
  while read a
  do
    done=$(($done+1))
    local per=$((($done*100)/$total))
    if [ $per -ne $pper ] ; then
      Dispn "$prefix $per%"
      pper=$per
    fi
  done
}

copyRPMs() {
  local patchdir=/$rpmdir/patch
  local rpmlist=`find /$rpmdir -type f | grep -v ^$patchdir/`
  local total=`echo $rpmlist|wc -w`
  mkdir -p /$srcdir
  rm -f /tmp/cmdok
  ( cp -pv $rpmlist /$srcdir && touch /tmp/cmdok ) | Progress $total "Copying installation packages: "
  [ -f /tmp/cmdok -a -d $patchdir ] && {
	cp -pr $patchdir /$srcdir/ || rm -f /tmp/cmdok
  }
  [ -f /tmp/cmdok ] || {
    Disp3 "Error: Failed to copy installation packages."
    Disp3 "This installation should not be used."
    Disp3 "Try obtaining a different installation media, reset the machine and retry."
    while true
    do
      sleep 10000
    done
  }
  Disp3
}

getMountDev() {
  echo -n UUID=
  blkid -s UUID -o value `awk '$2==mnt && $3=="ext3" {print $1}' mnt=/$disk$1 /proc/mounts`
}

InstallPatch() {
        patchdir=/$cdrom/patch
        [ -d $patchdir ] && {
                Disp "Installing patch"
                rdir=/$srcdir/patch
                for rpm in $patchdir/rpms/*.rpm
                do
                        name=`rpm -qp --qf '%{NAME}\n' $rpm`
                        Disp "Removing $name"
                        chroot /$disk rpm -e --nodeps $name
                        Disp "Installing $rpm"
                        mkdir -p $rdir
                        cp -fv $rpm $rdir
                        chroot /$disk rpm -v -U --nodeps --force /usr/src/forescout/patch/`basename $rpm`
                done
                for tgz in $patchdir/tars/*.tgz
                do
			[ -f "$tgz" ] && {
	                        Disp "Extracting $tgz"
				tar Czxf $disk $tgz
			}
                done
        }
}

FixTTY() {
	cat > /$disk/etc/init/serial.conf << "EOF1"
 
stop on runlevel [016]
start on runlevel [345]
 
respawn
instance /dev/ttyS0
pre-start exec /sbin/securetty ttyS0
exec /sbin/agetty /dev/ttyS0 19200 vt100-nav
 
EOF1
 
	cat > /$disk/etc/init/serial-ttyS1.conf << "EOF2"
 
stop on runlevel [016]
start on runlevel [345]
 
respawn
instance /dev/ttyS1
pre-start exec /sbin/securetty ttyS1
exec /sbin/agetty /dev/ttyS1 19200 vt100-nav
 
EOF2

}

clear
Disp "Performing post install tasks"

copyRPMs
InstallPatch
FixTTY

Disp "Copying GUI installation files"
mkdir -p /$disk/$guidir
tar -cf - -C /$cdrom InstData ManagementSetup.htm | tar -xf - -C /$disk/$guidir

mkdir /$disk/extra/log
InitttyS ttyS0
InitttyS ttyS1

mkdir /$disk/etc/sysctl.d 2>/dev/null
echo "net.ipv6.conf.default.disable_ipv6=1" > /$disk/etc/sysctl.d/default_ipv6
echo "net.ipv6.conf.lo.disable_ipv6=0" >> /$disk/etc/sysctl.d/default_ipv6

chroot $disk /usr/local/forescout/bin/fstool postinstall_serial
grep -q drbd_meta /$disk/etc/fstab && {

   awk '{if ($2=="/drbd_meta") print $1,$2,$3,$4",noauto",$5,$6; else print;}' /$disk/etc/fstab > /tmp/fstab
  Inst2 644 /tmp/fstab etc
}

sed 's/UTC=false/UTC=true/' /$disk/etc/sysconfig/clock > /tmp/clock
Inst2 644 /tmp/clock etc/sysconfig


echo "CounterACT device boot is complete" > /$disk/etc/issue
echo "Press ENTER to continue" >> /$disk/etc/issue
appdir=/$disk/usr/appliance
version=`cat $cdrom/inst/version`
hfbuild=`cat $cdrom/inst/hfbuild 2> /dev/null`
dmidecode > /$disk/boot/dmidecode.out 
cat /$disk/boot/dmidecode.out  | grep 'Manufacturer: NEC$' > /dev/null && modifyGrub " rhgb" " rhgb xdriver=vesa nomodeset"
modifyGrub " crashkernel=auto" " clearcpuid=229"
mkdir -p $appdir
tar Cczf /$disk/boot $appdir/boot.tgz .
props=/$appdir/appliance.properties
prod=CounterACT
echo "root=`getMountDev `" > $props
echo "ghost=`getMountDev /ghost`" >> $props
echo "prod=$prod" >> $props
echo "version=$version" >> $props
echo "hfbuild.iso=$hfbuild" >> $props

touch /$disk/usr/local/forescout/etc/.unconfigured


kernver=`rpm -qa --qf '%{VERSION}-%{RELEASE}.%{ARCH}' kernel`
oldkern="2.6.32-220.4.2.el6.i686"
sed s/$oldkern/$kernver/g /$disk/usr/local/forescout/etc/grub.conf.template > /tmp/grub.conf.template
Inst2 444 /tmp/grub.conf.template usr/local/forescout/etc/grub.conf.template


chroot $disk /usr/local/forescout/bin/fstool netconfig -D

Dispn "Creating the ghost partition"
egrep -v '/ghost' /$disk/etc/fstab > /tmp/fstab
Inst2 644 /tmp/fstab etc
total=`find /$disk -xdev 2>/dev/null | wc -l`
tar cf - --one-file-system -C /$disk . 2>/dev/null | tar xvf - -C /$disk/ghost | Progress $total "Creating the ghost partition: "
touch /$disk/ghost/.fsghost
Disp3

Disp "Post install tasks completed"

if [ -e /tmp/eject-usb-disk ]; then
  Disp3n "Please eject the USB disk and press enter to continue..."
  read line
else
  sleep 10
fi

%end
